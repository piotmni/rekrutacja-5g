namespace: 'open5gs'
# simple debugging container used for example for creating ue
# open5gs-dbctl add_ue_with_slice 001010000000001 465B5CE8B199B49FAA5F0A2EE238A6BC E8ED289DEBA952E4283B54E88E6183CA internet 1 111111
debuggingContainerEnabled: True


# Below default configs used to run NFs
# to see params see open5gs-component-base

open5gs-amf:
  componentName: amf

  ports:
    - name: sbi
      containerPort: 80
      protocol: TCP
    - name: metrics
      containerPort: 9090
    - name: ngap
      containerPort: 38412
      protocol: SCTP

  config:
    logger:
      level: info
    amf:
      sbi:
        - addr: 0.0.0.0
          port: 80
          advertise: open5gs-amf-sbi
      ngap:
        - dev: eth0
          port: 38412

      guami:
        - plmn_id:
            mcc: 260
            mnc: 35
          amf_id:
            region: 2
            set: 1
      tai:
        - plmn_id:
            mcc: 260
            mnc: 35
          tac: 1
      plmn_support:
        - plmn_id:
            mcc: 260
            mnc: 35
          s_nssai:
            - sst: 1


      security:
        integrity_order: [ NIA2, NIA1, NIA0 ]
        ciphering_order: [ NEA0, NEA1, NEA2 ]
      network_name:
        full: Open5GS
      amf_name: open5gs-amf
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 80

open5gs-ausf:
  componentName: ausf
  config:
    logger:
      level: info
    ausf:
      sbi:
        - addr: 0.0.0.0
          port: 80
          advertise: open5gs-ausf-sbi
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 80

open5gs-nrf:
  componentName: nrf
  config:
    logger:
      level: info
    nrf:
      sbi:
        - addr: 0.0.0.0
          port: 80

open5gs-bsf:
  componentName: bsf
  config:
    logger:
      level: info
    bsf:
      sbi:
        - addr: 0.0.0.0
          port: 80
          advertise: open5gs-bsf-sbi
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 80

open5gs-smf:
  componentName: smf

  ports:
    - name: sbi
      containerPort: 80
      protocol: TCP
    - name: metrics
      containerPort: 9090
      protocol: TCP
    - name: gtpc
      containerPort: 2123
      protocol: UDP
    - name: gtpu
      containerPort: 2152
      protocol: UDP
    - name: pfcp
      containerPort: 8805
      protocol: UDP


  config:
    logger:
      level: info
    parameter:
      no_ipv6: true

    smf:
      sbi:
        - addr: 0.0.0.0
          port: 80
          advertise: open5gs-smf-sbi
      pfcp:
        - dev: eth0
          port: 8805
      gtpc:
        - dev: eth0
          port: 2123
      gtpu:
        - dev: eth0
          port: 2152
      subnet:
        - addr: 10.45.0.1/16
          dnn: internet
      dns:
        - 8.8.8.8
        - 8.8.4.4
      mtu: 1400

    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 80

    upf:
      pfcp:
        - name: open5gs-upf-pfcp
          port: 8805


open5gs-upf:
  componentName: upf
  livenessProbeEnabled: False
  readinessProbeEnabled: False

  securityContext:
    capabilities:
      add:
        - NET_ADMIN
    privileged: true
    runAsNonRoot: false

  # kinda weird thing need to do on k8s
  initContainers:
    - name: create-tunnel
      image: "piotmni/open5gs:1.0.0-debian"
      command:
        - "/bin/bash"
        - "-c"
      args:
        - ip tuntap add name ogstun mode tun;
          ip link set ogstun up;
          echo "Setting IP 10.45.0.1/16 to device ogstun";
          ip addr add 10.45.0.1/16 dev ogstun;
          sysctl -w net.ipv4.ip_forward=1;
          echo "Enable NAT for 10.45.0.1/16 and device ogstun";
          iptables -t nat -A POSTROUTING -s 10.45.0.1/16 ! -o ogstun -j MASQUERADE;
      securityContext:
        privileged: true
        capabilities:
          add: [ "NET_ADMIN" ]

  ports:
    - name: gtpu
      containerPort: 2152
      protocol: UDP
    - name: pfcp
      containerPort: 8805
      protocol: UDP

  config:
    logger:
      level: info
    upf:
      pfcp:
        - dev: eth0
          port: 8805
      gtpu:
        - dev: eth0
          port: 2152
      subnet:
        - addr: 10.45.0.1/16
          dev: ogstun
          dnn: internet
    smf:
      pfc:
        - name: open5gs-smf-pfcp
          port: 8805


open5gs-udm:
  componentName: udm
  config:
    logger:
      level: info
    udm:
      sbi:
        - addr: 0.0.0.0
          port: 80
          advertise: open5gs-udm-sbi
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 80

open5gs-udr:
  componentName: udr
  config:
    logger:
      level: info
    db_uri: "mongodb://{{ .Release.Name }}-mongodb/open5gs"
    udr:
      sbi:
        - addr: 0.0.0.0
          port: 80
          advertise: open5gs-udr-sbi
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 80

open5gs-pcf:
  componentName: pcf
  config:
    logger:
      level: info
    db_uri: "mongodb://{{ .Release.Name }}-mongodb/open5gs"
    pcf:
      sbi:
        - addr: 0.0.0.0
          port: 80
          advertise: open5gs-pcf-sbi
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 80

open5gs-nssf:
  componentName: nssf
  config:
    logger:
      level: info
    nssf:
      sbi:
      - addr: 0.0.0.0
        port: 80
        advertise: open5gs-nssf-sbi

      nsi:
        - addr: open5gs-nrf-sbi
          port: 80
          s_nssai:
            sst: "1"
#            sd: "0x000001"

    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 80

mongodb:
  global:
    namespaceOverride: "open5gs"
  enabled: true
  auth:
    enabled: false


