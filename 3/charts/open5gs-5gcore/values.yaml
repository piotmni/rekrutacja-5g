namespace: 'open5gs'
# simple debugging container used for example for creating ue
# open5gs-dbctl add_ue_with_slice 001010000000001 465B5CE8B199B49FAA5F0A2EE238A6BC E8ED289DEBA952E4283B54E88E6183CA internet 1 111111
debuggingContainerEnabled: True


# Below default configs used to run NFs
# to see params see open5gs-component-base

open5gs-amf:
  componentName: amf

  ports:
    - name: sbi
      containerPort: 80
      protocol: TCP
    - name: metrics
      containerPort: 9090
    - name: ngap
      containerPort: 38412
      protocol: SCTP

  config:
    logger:
      level: info
    amf:
      sbi:
        - addr: 0.0.0.0
          port: 80
          advertise: open5gs-amf-sbi
      ngap:
        - dev: eth0
          port: 38412

      guami:
        - plmn_id:
            mcc: 260
            mnc: 35
          amf_id:
            region: 2
            set: 1
      tai:
        - plmn_id:
            mcc: 260
            mnc: 35
          tac: 1
      plmn_support:
        - plmn_id:
            mcc: 260
            mnc: 35
          s_nssai:
            - sst: 1


#      guami:
#        - plmn_id:
#            mcc: 001
#            mnc: 01
#          amf_id:
#            region: 2
#            set: 1
#      tai:
#        - plmn_id:
#            mcc: "001"
#            mnc: "01"
#          tac:
#            - 1
#
#      plmn_support:
#        - plmn_id:
#            mcc: 001
#            mnc: 01
#          s_nssai:
#            - sst: 1
#              sd: 000001

      security:
        integrity_order: [ NIA2, NIA1, NIA0 ]
        ciphering_order: [ NEA0, NEA1, NEA2 ]
      network_name:
        full: Open5GS
      amf_name: open5gs-amf
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 80

open5gs-ausf:
  componentName: ausf
  config:
    logger:
      level: info
    ausf:
      sbi:
        - addr: 0.0.0.0
          port: 80
          advertise: open5gs-ausf-sbi
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 80

open5gs-nrf:
  componentName: nrf
  config:
    logger:
      level: info
    nrf:
      sbi:
        - addr: 0.0.0.0
          port: 80

open5gs-bsf:
  componentName: bsf
  config:
    logger:
      level: info
    bsf:
      sbi:
        - addr: 0.0.0.0
          port: 80
          advertise: open5gs-bsf-sbi
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 80

open5gs-smf:
  componentName: smf

  ports:
    - name: sbi
      containerPort: 80
      protocol: TCP
    - name: metrics
      containerPort: 9090
      protocol: TCP
    - name: gtpc
      containerPort: 2123
      protocol: UDP
    - name: gtpu
      containerPort: 2152
      protocol: UDP
    - name: pfcp
      containerPort: 8805
      protocol: UDP


  config:
    logger:
      level: info
    parameter:
      no_ipv6: true

    smf:
      sbi:
        - addr: 0.0.0.0
          port: 80
          advertise: open5gs-smf-sbi
      pfcp:
        - dev: eth0
          port: 8805
      gtpc:
        - dev: eth0
          port: 2123
      gtpu:
        - dev: eth0
          port: 2152
      subnet:
        - addr: 10.45.0.1/16
          dnn: internet
      dns:
        - 8.8.8.8
        - 8.8.4.4
      mtu: 1400

    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 80

    upf:
      pfcp:
        - name: open5gs-upf-pfcp
          port: 8805


open5gs-upf:
  componentName: upf
  livenessProbeEnabled: False
  readinessProbeEnabled: False

  securityContext:
    capabilities:
      add:
        - NET_ADMIN
    privileged: true
    runAsNonRoot: false

  # kinda weird thing need to do on k8s
  initContainers:
    - name: create-tunnel
      image: "piotmni/open5gs:1.0.0-debian"
      command:
        - "/bin/bash"
        - "-c"
      args:
        - ip tuntap add name ogstun mode tun;
          ip link set ogstun up;
          echo "Setting IP 10.45.0.1/16 to device ogstun";
          ip addr add 10.45.0.1/16 dev ogstun;
          sysctl -w net.ipv4.ip_forward=1;
          echo "Enable NAT for 10.45.0.1/16 and device ogstun";
          iptables -t nat -A POSTROUTING -s 10.45.0.1/16 ! -o ogstun -j MASQUERADE;
      securityContext:
        privileged: true
        capabilities:
          add: [ "NET_ADMIN" ]

  ports:
    - name: gtpu
      containerPort: 2152
      protocol: UDP
    - name: pfcp
      containerPort: 8805
      protocol: UDP

  config:
    logger:
      level: info
    upf:
      pfcp:
        - dev: eth0
          port: 8805
      gtpu:
        - dev: eth0
          port: 2152
      subnet:
        - addr: 10.45.0.1/16
          dev: ogstun
          dnn: internet
    smf:
      pfc:
        - name: open5gs-smf-pfcp
          port: 8805


open5gs-udm:
  componentName: udm
  config:
    logger:
      level: info
    udm:
      sbi:
        - addr: 0.0.0.0
          port: 80
          advertise: open5gs-udm-sbi
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 80

open5gs-udr:
  componentName: udr
  config:
    logger:
      level: info
    db_uri: "mongodb://{{ .Release.Name }}-mongodb/open5gs"
    udr:
      sbi:
        - addr: 0.0.0.0
          port: 80
          advertise: open5gs-udr-sbi
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 80

open5gs-pcf:
  componentName: pcf
  config:
    logger:
      level: info
    db_uri: "mongodb://{{ .Release.Name }}-mongodb/open5gs"
    pcf:
      sbi:
        - addr: 0.0.0.0
          port: 80
          advertise: open5gs-pcf-sbi
    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 80

open5gs-nssf:
  componentName: nssf
  config:
    logger:
      level: info
    nssf:
      sbi:
      - addr: 0.0.0.0
        port: 80
        advertise: open5gs-nssf-sbi

      nsi:
        - addr: open5gs-nrf-sbi
          port: 80
          s_nssai:
            sst: "1"
#            sd: "0x000001"

    nrf:
      sbi:
        - name: open5gs-nrf-sbi
          port: 80

mongodb:
  global:
    namespaceOverride: "open5gs"
  enabled: true
  auth:
    enabled: false


cat << EOF > /tmp/account.js
db = db.getSiblingDB('open5gs')
cursor = db.accounts.find()
if ( cursor.count() == 0 ) {
    db.accounts.insert({ salt: 'f5c15fa72622d62b6b790aa8569b9339729801ab8bda5d13997b5db6bfc1d997', hash: '402223057db5194899d2e082aeb0802f6794622e1cbc47529c419e5a603f2cc592074b4f3323b239ffa594c8b756d5c70a4e1f6ecd3f9f0d2d7328c4cf8b1b766514effff0350a90b89e21eac54cd4497a169c0c7554a0e2cd9b672e5414c323f76b8559bc768cba11cad2ea3ae704fb36abc8abc2619231ff84ded60063c6e1554a9777a4a464ef9cfdfa90ecfdacc9844e0e3b2f91b59d9ff024aec4ea1f51b703a31cda9afb1cc2c719a09cee4f9852ba3cf9f07159b1ccf8133924f74df770b1a391c19e8d67ffdcbbef4084a3277e93f55ac60d80338172b2a7b3f29cfe8a36738681794f7ccbe9bc98f8cdeded02f8a4cd0d4b54e1d6ba3d11792ee0ae8801213691848e9c5338e39485816bb0f734b775ac89f454ef90992003511aa8cceed58a3ac2c3814f14afaaed39cbaf4e2719d7213f81665564eec02f60ede838212555873ef742f6666cc66883dcb8281715d5c762fb236d72b770257e7e8d86c122bb69028a34cf1ed93bb973b440fa89a23604cd3fefe85fbd7f55c9b71acf6ad167228c79513f5cfe899a2e2cc498feb6d2d2f07354a17ba74cecfbda3e87d57b147e17dcc7f4c52b802a8e77f28d255a6712dcdc1519e6ac9ec593270bfcf4c395e2531a271a841b1adefb8516a07136b0de47c7fd534601b16f0f7a98f1dbd31795feb97da59e1d23c08461cf37d6f2877d0f2e437f07e25015960f63', username: 'admin', roles: [ 'admin' ], "__v" : 0})
}
EOF
#
mongo mongodb://open5gs-mongodb/open5gs /tmp/account.js
#rm -f /tmp/account.js

#
#10/31 15:32:30.874: [amf] WARNING: NG-Setup failure: (../src/amf/ngap-handler.c:316)
#10/31 15:32:30.874: [amf] WARNING:     Cannot find S_NSSAI. Check 'amf.plmn_support.s_nssai' configuration (../src/amf/ngap-handler.c:317)